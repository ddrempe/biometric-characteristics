/*
  This file is automatically generated. Any changes will be overwritten.
  Modify add-sample-set.component.ts instead.
*/
import { ChangeDetectorRef, ViewChild, AfterViewInit, Injector, OnInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { Subscription } from 'rxjs';
import { FormComponent } from '@radzen/angular';

import { BiometricCharacteristicsModelService } from '../biometric-characteristics-model.service';

export class AddSampleSetGenerated implements AfterViewInit, OnInit, OnDestroy {
  // Components
  @ViewChild(FormComponent) form0: FormComponent;

  // Array of messages displayed by the notification component.
  messages = [];

  router: Router;

  cd: ChangeDetectorRef;

  route: ActivatedRoute;

  _location: Location;

  subscription: Subscription;


  biometricCharacteristicsModel: BiometricCharacteristicsModelService;

  getDeviceSetsResult: any;

  getPersonSetsResult: any;

  getSampleDatasetSetsResult: any;

  getSampleTypeSetsResult: any;

  parameters: any;

  constructor(private injector: Injector) {
  }

  ngOnInit() {
    this.router = this.injector.get(Router);

    this.cd = this.injector.get(ChangeDetectorRef);

    this._location = this.injector.get(Location);

    this.route = this.injector.get(ActivatedRoute);

    this.biometricCharacteristicsModel = this.injector.get(BiometricCharacteristicsModelService);
  }

  ngAfterViewInit() {
    this.subscription = this.route.params.subscribe(parameters => {
      this.parameters = parameters;
      this.load();
      this.cd.detectChanges();
    });
  }

  ngOnDestroy() {
    this.subscription.unsubscribe();
  }


  load() {
    this.biometricCharacteristicsModel.getDeviceSets(null, null, null, null, null, null)
    .subscribe((result: any) => {
      this.getDeviceSetsResult = result.value;
    }, (result: any) => {

    });

    this.biometricCharacteristicsModel.getPersonSets(null, null, null, null, null, null)
    .subscribe((result: any) => {
      this.getPersonSetsResult = result.value;
    }, (result: any) => {

    });

    this.biometricCharacteristicsModel.getSampleDatasetSets(null, null, null, null, null, null)
    .subscribe((result: any) => {
      this.getSampleDatasetSetsResult = result.value;
    }, (result: any) => {

    });

    this.biometricCharacteristicsModel.getSampleTypeSets(null, null, null, null, null, null)
    .subscribe((result: any) => {
      this.getSampleTypeSetsResult = result.value;
    }, (result: any) => {

    });
  }

  form0Cancel(event: any) {
    this._location.back();
  }

  form0Submit(event: any) {
    this.biometricCharacteristicsModel.createSampleSet(event)
    .subscribe((result: any) => {
      this.router.navigate([{ outlets: { popup: null } }]).then(() => this.router.navigate(['sample-sets']));
    }, (result: any) => {
      this.messages.push({ severity: "error", summary: `Error`, detail: `Unable to create new SampleSet!` });
    });
  }
}
